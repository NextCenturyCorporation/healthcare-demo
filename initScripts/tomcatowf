#!/bin/sh
#
# init.d script with LSB support.
#
# Copyright (c) 2014 Next Century
#
# This is free software; you may redistribute it and/or modify
# it under the terms provided by Next Century Inc.
#
# This is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the terms of Next Century terms if
# not, contact Next Century Inc., 7075 Samuel Morse Dr. Suite 210
# Columbia, MD 02146 USA
#
### BEGIN INIT INFO
# Provides:          tomcatowf
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: tomcat instance supporting owf
# Description:       Provides access to the OWF widgets used by various 
#                    applications via SOA
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# something that will be recognized in a ps -ef that is unique to this process
DAEMON=/home/demoadmin/healthcare-demo/owf/apache-tomcat-7.0.21
DESC=container

# Default defaults.  Can be overridden by the /etc/default/$NAME
NAME=tomcatowf
START_NAME=startup.sh
SHUTDOWN_NAME=shutdown.sh
CMD_NAME=/usr/bin/java
CONF=/etc/tomcatowf
RUNDIR=/home/demoadmin/healthcare-demo/owf/apache-tomcat-7.0.21/bin
PIDFILE=$RUNDIR/$NAME.pid
START_DAEMON=$DAEMON"/bin/"$START_NAME
STOP_DAEMON=$DAEMON"/bin/"$SHUTDOWN_NAME

# Include tomcatowf defaults if available
if [ -f /etc/default/$NAME ] ; then
	. /etc/default/$NAME
fi

if test ! -x $DAEMON; then
    echo "Could not find $DAEMON"
    exit 0
fi

. /lib/lsb/init-functions

STARTTIME=5
DIETIME=5                   # Time to wait for the server to die, in seconds
                            # If this value is set too low you might not
                            # let some servers to die gracefully and
                            # 'restart' will not work

DAEMONUSER=${DAEMONUSER:-demoadmin}
DAEMON_OPTS=

set -e

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this an expected java process
    [ "$cmd" != "$CMD_NAME" ] &&  return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

start_server() {
    [ ! -e "$RUNDIR" ] && {
        log_daemon_msg "OWF Tomcat not install in $RUNDIR where it is expected"
	return 1;
    }

    # Start the process using the wrapper
            start-stop-daemon --background --start --quiet --pidfile $PIDFILE \
                        --make-pidfile --chuid $DAEMONUSER \
                        --exec $START_DAEMON -- $DAEMON_OPTS
            errcode=$?
            # give server some time to startup
            [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time
    # get the pid of the tomcat process that started up
    cmd=`ps -eaf | grep $DAEMON | grep -v grep | cut -c10-15`
    # trim the value
    cmd= echo $cmd |tr -d ' '
    # have to update the pid in the pidfile
    echo $cmd > $PIDFILE &
    return $errcode
}

stop_server() {
    # Stop the process using the pid
    # Consider getting the shutdown script to work for a graceful shutdown
        start-stop-daemon --stop --quiet --pidfile $PIDFILE \
                        --chuid $DAEMONUSER 
        errcode=$?
	return $errcode
}

force_stop() {
# Force the process to die killing it manually
	[ ! -e "$PIDFILE" ] && return
	if running ; then
		kill -15 $pid
	# Is it really dead?
		sleep "$DIETIME"s
		if running ; then
			kill -9 $pid
			sleep "$DIETIME"s
			if running ; then
				echo "Cannot kill $NAME (pid=$pid)!"
				exit 1
			fi
		fi
	fi
	rm -f $PIDFILE
}


case "$1" in
  start)
	log_daemon_msg "Starting $NAME"
        # Check if it's running first
        if running ;  then
            log_daemon_msg "apparently already running"
            log_progress_msg "apparently already running"
            log_end_msg 0
            exit 0
        fi
        if start_server ; then
            # NOTE: Some servers might die sometime after they start,
            # this code will detect this issue if STARTTIME is set
            # to a reasonable value
            [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time
            if  running ;  then
                # It's ok, the server started and is running
                log_end_msg 0
            else
                log_daemon_msg "Not running after we started it $DESC" "$NAME"
                # It is not running after we did start
                log_end_msg 1
            fi
        else
            log_daemon_msg "Did not start at all $DESC" "$NAME"
            # Either we could not start it
            log_end_msg 1
        fi
	;;
  stop)
        if running ; then
            # Only stop the server if we see it running
			errcode=0
            stop_server || errcode=$?
            log_end_msg $errcode
        else
            # If it's not running don't do anything
            log_daemon_msg "apparently not running"
            log_progress_msg "apparently not running"
            log_end_msg 0
            exit 0
        fi
        ;;
  force-stop)
        # First try to stop gracefully the program
        $0 stop
        if running; then
            # If it's still running try to kill it more forcefully
            log_daemon_msg "Stopping (force) $DESC" "$NAME"
			errcode=0
            force_stop || errcode=$?
            log_end_msg $errcode
        fi
	;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
		errcode=0
        stop_server || errcode=$?
        # Wait some sensible amount, some server need this
        [ -n "$DIETIME" ] && sleep $DIETIME
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        running || errcode=$?
        log_end_msg $errcode
	;;
  status)

        log_daemon_msg "Checking status of $NAME"
        if running ;  then
            log_daemon_msg "apparently already running"
            log_progress_msg "running"
            log_end_msg 0
        else
            log_daemon_msg "apparently not running"
            log_progress_msg "apparently not running"
            log_end_msg 1
            exit 1
        fi
        ;;
  # tomcat can't reload its configuration.
  reload)
        log_daemon_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "cannot re-read the config file (use restart)."
        ;;

  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
